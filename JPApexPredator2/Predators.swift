//
//  Predators.swift
//  JPApexPredator2
//
//  Created by Vladyslav Tarabunin on 23/05/2025.
//


import Foundation
//ייבוא של הספרייה פאונדיישן, שמכילה הרבה פונקציות בסיסיות לעבודה עם תאריכים, קבצים, נתונים, JSON, וכו'
//שורה יו אר אל  בודקת האם קיים קובץ בשם גייאפקספרדטורגייסון בתוך הבאנדל של האפליקציה (כלומר, המשאבים שצורפו לפרויקט). אם כן – היא שומרת את הכתובת יו אר אל של הקובץ במשתנה.
class Predators {//הגדרה של מחלקה בשם פרדטורס. מחלקות בסוויפט הן כמו תבניות ליצירת אובייקטים שיכולים להכיל משתנים ופונקציות.
    var allApexPredators: [ApexPredator] = []
    var apexPredators: [ApexPredator] = [] //כאן מוגדר משתנה מסוג מערך של אפקספרדטור, שהוא מודל אחר שמוגדר בקובץ אפקספרדטור. בתחילה, המערך ריק.
    
    //בקלאס הזה בעצם יצרנו שתי תצוגות דמיוניות אולפרדטורס שלא משתנה ופרדטורס רגיל   שכן משתנה כשאנו מבצעים מיון הפרדטורס הגיל משתנה ומציג לנו את מה שאנו מיינו
    
    
    
    
    init(){
        decodeApexPredatorData()
    }//טוען את כל הדינוזאורים מגייסון
//    אינט זוהי פונקציית אתחול  – היא מתבצעת אוטומטית כשיוצרים אובייקט חדש מסוג פרדטור.
//   מיד עם יצירת האובייקט, היא קוראת לפונקציה דיקודאפקס כדי לטעון את הנתונים מקובץ גייסון.

    func decodeApexPredatorData() {//פונקציה שמטרתה לקרוא דיקוד את הנתונים מקובץ גייסון שנמצא באפליקציה, ולהמיר אותם לאובייקטים מסוג אפקספרדטור.
        if let url = Bundle.main.url(forResource: "jpapexpredators", withExtension: "json") { //מחפש את הקובץ מתוך הבאנדל אם מוצא הוא מחזיר את היואראל שלו
            do {
                let data = try Data(contentsOf: url)
//                מנסה לקרוא את הנתונים מהקובץ ל-אובייקט מסוג דאטה.
//                השימוש ב-טרי מציין שהפעולה עשויה לזרוק שגיאה במקרה של כישלון.
                let decoder = JSONDecoder()
//                יוצר אובייקט לפענוח גייסון.
                decoder.keyDecodingStrategy = .convertFromSnakeCase //ממיר את הכתיבה מגייסון מקו תחתון למחובר עם אות גדולה באמצה
                allApexPredators = try decoder.decode([ApexPredator].self, from: data)
                apexPredators = allApexPredators
    // כאן בעצם הקוד מפאנח את המידע מהתצוגה הדימיונית שיצרנו למעלה אולפרדטור
    // ואפקס שווה לאול בגלל שהוא בסופו של דבר ממיין את הצג השני ששיכפלנו מאול
//  מנסה לפענח את הנתונים כ-מערך של אובייקטים מטיפוס אפקספרדטור.
//  אם הפענוח מצליח, הנתונים נשמרים במשתנה הגלובלי אולאפקספרטור, ולאחר מכן מעתיקים אותם למשתנה אפקספרדטוררגיל

            }catch{
                print("Error decoding json data: \(error)")
            }
        }
    }
    //הבלוק דו קאץ מבצע את תהליך טעינת קובץ הגייסון ופענוחו למערך של אפקספרדטור, עם טיפול בשגיאות במקרה שמשהו נכשל.
    // טוען את הקובץ לקובץ נתונים דאטה
    //יוצר מפענח גייסון ומגדיר לו אסטרטגיית פענוח שמתאימה למפתחות עם קו תחתון
    // ממיר את הנתונים למערך של אובייקטים מסוג אפקספרדטור
    // ואם יש שגיאה – מדפיס הודעת שגיאה למסך

    
    func search(for searchTerm: String) -> [ApexPredator] {
        if searchTerm.isEmpty {
            return apexPredators
        } else {
            return apexPredators.filter {
                predator in
                predator.name.localizedCaseInsensitiveContains(searchTerm)
            }
        }
    }
//    שם הפונקציה:סרצ
//    קלט: מחרוזת (סרצטרמ)
//    פלט: מערך של אובייקטים מטיפוס אפקספרדטור
//    הפונקציה מבצעת חיפוש ברשימת טורפים על בסיס שם. אם אין מונח חיפוש, היא מחזירה את כל הרשימה.
//    אם יש מונח חיפוש, היא מחזירה רק את הטורפים שהשם שלהם מכיל את המונח בצורה שאינה תלויה באותיות גדולות או קטנות.
//

    func sort(by alphabetical: Bool) {
        apexPredators.sort { predator1, predator2 in
            if alphabetical {
                predator1.name < predator2.name
            }else{
                predator1.id < predator2.id
            }
        }
    }
//    שם הפונקציה:סורט
//    קלט: משתנה בוליאני (אלפבטי)
//    אין פלט (המיון מתבצע על הרשימה עצמה)
//    הפונקציה משתמשת ב-סורט, הממיינת את הרשימה במקום .
//    מתקבלות שתי ישויות להשוואה: פרדטוראחד ו-פרדטורשתיים.
//    אם המשתנההאלפבטי הוא תרו - המיון מתבצע לפי השם  בסדר עולה (א'-ת').
//    אם הוא פולס - המיון מתבצע לפי מזהה תז בסדר עולה (מהקטן לגדול).
//    בקיצור הפונקציה מאפשרת למיין את רשימת הטורפים לפי שם או לפי מזהה, בהתאם לערך  הבוליאני שניתן לה
    
    
    func filter(by type: APType) {
        if type == .all {
            apexPredators = allApexPredators
        }else{
            apexPredators = allApexPredators.filter { predator in
                predator.type == type
            }
        }
    }
// פונקציית סינון
}


